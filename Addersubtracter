module adder_subtractor(
    input wire [7:0] A,
    input wire [7:0] B,
    input wire Su,
    input wire Eu,
    output wire [7:0] Result,
    output wire Cout
);

wire [8:0] C;
wire [7:0] CinxB;
wire [7:0] S;

assign CinxB[0] = B[0] ^ Su;
assign CinxB[1] = B[1] ^ Su;
assign CinxB[2] = B[2] ^ Su;
assign CinxB[3] = B[3] ^ Su;
assign CinxB[4] = B[4] ^ Su;
assign CinxB[5] = B[5] ^ Su;
assign CinxB[6] = B[6] ^ Su;
assign CinxB[7] = B[7] ^ Su;

assign C[0] = Su;

assign S[0] = (A[0] ^ CinxB[0]) ^ C[0];
assign C[1] = (A[0] & CinxB[0]) | (C[0] & (A[0] ^ CinxB[0]));

assign S[1] = (A[1] ^ CinxB[1]) ^ C[1];
assign C[2] = (A[1] & CinxB[1]) | (C[1] & (A[1] ^ CinxB[1]));

assign S[2] = (A[2] ^ CinxB[2]) ^ C[2];
assign C[3] = (A[2] & CinxB[2]) | (C[2] & (A[2] ^ CinxB[2]));

assign S[3] = (A[3] ^ CinxB[3]) ^ C[3];
assign C[4] = (A[3] & CinxB[3]) | (C[3] & (A[3] ^ CinxB[3]));

assign S[4] = (A[4] ^ CinxB[4]) ^ C[4];
assign C[5] = (A[4] & CinxB[4]) | (C[4] & (A[4] ^ CinxB[4]));

assign S[5] = (A[5] ^ CinxB[5]) ^ C[5];
assign C[6] = (A[5] & CinxB[5]) | (C[5] & (A[5] ^ CinxB[5]));

assign S[6] = (A[6] ^ CinxB[6]) ^ C[6];
assign C[7] = (A[6] & CinxB[6]) | (C[6] & (A[6] ^ CinxB[6]));

assign S[7] = (A[7] ^ CinxB[7]) ^ C[7];
assign C[8] = (A[7] & CinxB[7]) | (C[7] & (A[7] ^ CinxB[7]));

assign Cout = C[8];

always @(Eu) begin
    if (Eu) begin
        Result <= S;
    end else begin
        Result <= 8'bZZZZZZZZ;
    end
end

endmodule
